.. include:: ../module.txt

.. _section6-datastore-label:

DataStore Category
======================================================

.. _section6-1-rds-label:

Relational Database Service(RDS)
------------------------------------------------------

Relational Database Service(RDS)はセットアップや拡張、運用が容易なフルマネージドリレーショナルデータベースサービスである。
管理コンソールやAPIによって簡単にデータベースサービスを構築でき、時間単位の従量課金性である。
RDSは以下の4つのデータベースエンジンを選択できる。

* MySQL
* PostgreSQL
* Oracle
* Microsoft SQL Server

RDSではデータベース運用管理では必須となる自動バックアップ機能及び冗長化構成による自動フェイルオーバをサポートしている。
自動バックアップ機能では、DBスナップショットとトランザクションログを保存している。DBスナップショットは1日1回、指定した世代数を、
指定した時間帯に取得する。リストアは任意の世代のDBスナップショットを指定して復元を行う。トランザクションログは随時取得されており、
任意に指定した状態へのリカバリが可能で、時刻は直近5分から、より古いスナップショットの時点の間で指定する。
データベース構築時には「Multi-AZ配置」と呼ばれる、レプリケーションによる冗長化構成(リードレプリカ)を選択できる。
この配置をとることで、マスターとなるRDSとは別のアベイラビリティゾーンに、スレーブとなるRDSを配置し、マスターからデータを複製する。
マスターに障害が発生すると、自動的にフェイルオーバし、スレーブがマスターに昇格する。Malti-AZ配置されたRDSは単一のエンドポイントを持つため、
マスターが変更された場合にも情報システム側で意識することなく、データベースを利用できる。
RDSへのアクセス制御はEC2と同様、Security Groupで設定する。データの暗号化機能もサポートされており、
暗号化キー管理サービス「Key Management Service(KMS)」に格納されたキーを使って暗号化できる。
MySQLとPostgreSQLではDBインスタンスの暗号化が、SQLServerとOracleでは、Transparent Data Encryption方式によるデータ暗号化がそれぞれ可能である。

.. note:: リードレプリカを作成した際には、マスター・スレーブ各々IPが割り振られるが、単一のCNAMEで、RDSエンドポイントが与えられるのでクライアントからはエンドポイントを参照すればよい。また、書き込み時はレプリカの書き込みも含め行われるのでリード側の一貫性は保証される。

.. note:: RDSのマスタースレーブはクロスリージョンでもサポートされる。

.. _section6-2-elasticache-label:

ElastiCache
------------------------------------------------------

ElastiCacheはデータベースの応答をキャッシュに保存し高速化する。ElastiCacheでは「memcached」と「Redis」という2種類の
インメモリキャッシュエンジンをサポートしている。

* memcached

単純なキーバリューモデルで、複数ノード間のキャッシュレプリケーションなどの冗長化機能がないため、
可用性はアプリケーション側で確保する必要がある。

* Redis

.. todo:: 各プロダクトの違いを記述する。

.. _section6-3-dynamodb-label:

DynamoDB
------------------------------------------------------

.. _section6-3-1-dynamodb-overvie-label:

Overview
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

DynamoDBはAmazonが設計・開発していたNoSQLデータベース「Amazon Dynamo」をベースにサービス化したデータストアである。
NoSQLではトランザクションによるデータ一貫性を保証する代わりに、結果整合性を担保することでクラスタ内の全ノードでの読み書きを可能にしている。
つまり、データ更新直後は古いデータを取得する可能性があるが、結果的に全て最新の状態で更新される。
DynamoDBもその他のAWSサービスと同様、従量課金制で、基準は指定したリクエストスループットと保存されたデータ量により決定される。
DynamoDBの設定では、テーブルごとに目標とする書き込みと読み込みのリクエストスループットを、キャパシティーユニットとして、以下のいずれか指定する。

* 読み込みキャパシティーユニット
  #. 最大4KBのデータを上限に、強い整合性のある読み込みを１秒あたり１回
  #. 最大4KBのデータを上限に、結果整合性のある読み込みを１秒あたり２回
* 書き込みキャパシティーユニット
  #. 最大1KBのデータを上限に、書き込みを１秒あたり１回

DynamoDBは指定されたリクエストスループットに基づいて、自動的に必要なコンピュータリソースを確保する。
保存されたデータ量によって課金されるが、データ容量は自動的に増加される。

.. warning:: DynamoDBのデータは1項目(1行)あたり400KBのため、バイナリデータなどサイズの大きくなりがちなデータは保存できないので注意。

.. _section6-3-2-dynamodb-create-label:

DynamoDBの作成
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

■AWSコンソールからDynamodbを選択し、「テーブルの作成」を押下する。

.. figure:: img/management-console-create-dynamodb-1.png
      :scale: 100%

■テーブル名、プライマリーキー等入力し、「作成」ボタンを押下する。

.. figure:: img/management-console-create-dynamodb-2.png
      :scale: 100%

.. _section6-4-redshift-label:


Redshift
------------------------------------------------------

Redshiftは大量データを使った集計や分析に特化したデータウェアハウス・サービスである。同様に従量課金性であるが、主な特徴は、

* 高速性
* 拡張性
* 互換性

RedshiftはSQLクエリを高速化するために、列指向データベースを採用している。一般的なリレーショナルデータベースが行指向型でレコードを取得するクエリに向いているのに対し、列指向データベースでは、カラム単位でのデータを高速に集計できる。他のAWSサービスと同様、スケーラブルな特性を持ち、パフォーマンスやデータ保存ストレージが不足してもすぐにノード数や性能タイプを変更でき、MPP（Massively Parallel Processing:大規模並列計算）機構を持ち、全ノードが並列に処理するため、ノード数を増やせば処理性能も向上する。また、Redshift用にカスタマイズされたJDBCやODBCのドライバーが用意され、既存のSQLをそのまま流用でき、PostgreSQL用のドライバーを流用することが可能である。なお、既存のETL(Extract/Transform/Load)ツールやTableauといったBIツールを利用することもできる。

.. note:: RedShiftの実態はPostgreSQLのため、流用することが可能である。
