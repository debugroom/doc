.. include:: ../../module.txt

.. _section6-cassndra-data-modeling-label:

データモデリング
=====================================================

.. note:: この内容は検証中であり、検証の結果によっては記載内容を変更する可能性がある事に注意。

.. _section6-X-cassandra-discussion-label:

検証のポイント
-----------------------------------------------------

* Cassandraのテーブル構造  |br| 
  →リレーショナルデータベースとは違い、データ中心の設計アプローチをとるべきではない(と言われている)。データストアの特性が違うので、Cassandraで出来る事・出来ない事を整理して、適切な永続化のテーブル構造を考える。
* アプリケーションのデータモデリングの差異 |br| 
  → エンティティオブジェクトはどのような構造をとるべきか
* Spring Data Cassandraのマッピング機能とデータアクセスのお作法 |br| 
  → どのような機能を持っていて、どういう実装方法が望ましいか
* データモデリング設計の進め方

.. _section6-X-cassandra-use-case-label:

ユースケース
-----------------------------------------------------

リレーショナルデータベースの場合のモデリングと対比するために、`Spring Data JPAにおけるサンプルのユースケース <http://debugroom.github.io/doc/java/spring/springdatajpa/index.html>`_ を考える。

.. list-table:: ユースケース
   :header-rows: 1
   :widths: 30,70

   * - ユースケース
     - リレーショナルモデルにおける |br| エンティティ関連

   * - 全てのユーザを検索する
     - なし
   * - 全ての住所を検索する
     - なし
   * - 全てのメールアドレスを検索する
     - なし
   * - 全てのグループを検索する
     - なし
   * - 特定のユーザを検索する
     - なし
   * - 特定のユーザのアドレスを検索する
     - なし
   * - 特定のユーザがもつEmailアドレスを検索する
     - なし
   * - 指定したグループ名を元にグループを検索する
     - なし
   * - 指定されたユーザの住所を取得する
     - ユーザ : 住所 = 1 : 1 
   * - 特定の郵便番号を持つユーザ一覧を取得する
     - ユーザ : 住所 = 1 : 1 
   * - 特定の郵便番号を持たないユーザ一覧を取得する
     - ユーザ : 住所 = 1 : 1  
   * - 指定されたユーザの住所を追加する
     - ユーザ : 住所 = 1 : 1 
   * - 指定されたユーザの住所を更新する
     - ユーザ : 住所 = 1 : 1 
   * - 指定されたユーザの住所を削除する
     - ユーザ : 住所 = 1 : 1 
   * - 指定されたユーザの情報を住所を含めて削除する
     - ユーザ : 住所 = 1 : 1 
   * - 指定されたユーザのEmailの一覧を取得する
     - ユーザ : メール = 1 : N 
   * - 特定のメールアドレスを持つユーザを検索する
     - ユーザ : メール = 1 : N 
   * - 指定されたユーザのメールアドレスを追加する
     - ユーザ : メール = 1 : N 
   * - 指定されたユーザをメールアドレスを含めて追加する
     - ユーザ : メール = 1 : N 
   * - 指定されたユーザのメールアドレスを更新する
     - ユーザ : メール = 1 : N 
   * - 指定されたユーザのメールアドレスを1件削除する
     - ユーザ : メール = 1 : N 
   * - 指定されたユーザのメールアドレスを全件削除する
     - ユーザ : メール = 1 : N 
   * - 指定されたユーザの情報をメールアドレスを含めて削除する
     - ユーザ : メール = 1 : N 
   * - 指定したユーザが属するグループの一覧を取得する
     - ユーザ : グループ = N : N 
   * - 指定したグループに所属する全てのユーザ一覧を取得する
     - ユーザ : グループ = N : N 
   * - 指定したグループに所属しない全てのユーザ一覧を取得する
     - ユーザ : グループ = N : N 
   * - 指定したユーザを指定したグループに追加する
     - ユーザ : グループ = N : N 
   * - 指定したユーザをグループから除外する
     - ユーザ : グループ = N : N 
   * - 指定したグループを削除し、 |br| ユーザが所属するグループの情報を更新する
     - ユーザ : グループ = N : N 
   * - 指定されたユーザを削除し、グループのユーザ一覧を更新する
     - ユーザ : グループ = N : N 

.. _section6-X-differenece-relational-data-modeling-label:

データベース、モデリングにおける相違点
-----------------------------------------------------

.. _section6-X-X-differenece-between-rdb-and-cassandra-label:

RDBMSとCassandra
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. list-table:: データベース間の相違
   :header-rows: 1
   :stub-columns: 1
   :widths: 30,50,50

   * - 相違点
     - RDBMS
     - Cassandra

   * - 一貫性
     - 強一貫性
     - 設定可能な一貫性※1
   * - トランザクション
     - ACIDトランザクション
     - 軽量トランザクション
   * - クエリ
     - SQL
     - CQL※2

.. list-table:: 設定可能な書き込み一貫性*1
   :header-rows: 1
   :widths: 30,50

   * - 一貫性レベル
     - 特徴
   * - ALL
     - クラスター内のすべてのレプリカ・ノードのコミット・ログとmemtableに |br| 書き込まれる
   * - EACH_QUORUM
     - 書き込みが、各データ・センターのレプリカ・ノードのクォーラム（過半数）の |br| コミット・ログとmemtableに書き込まれる
   * - QUORUM
     - 書き込みが、すべてのデータ・センターのレプリカ・ノードのクォーラム |br| （過半数）のコミット・ログとmemtableに書き込まれる
   * - LOCAL_QUORUM
     - 書き込みが、コーディネーター・ノードと同じデータ・センターにある |br| レプリカ・ノードのクォーラム（過半数）のコミット・ログとmemtableに |br| 書き込まれる
   * - ONE
     - 書き込みが、少なくとも1つのレプリカ・ノードのコミット・ログとmemtableに |br| 書き込まれる
   * - TWO
     - 書き込みが、少なくとも2つのレプリカ・ノードのコミット・ログとmemtableに |br| 書き込まれる
   * - THREE
     - 書き込みが、少なくとも3つのレプリカ・ノードのコミット・ログとmemtableに |br| 書き込まれる
   * - LOCAL_ONE
     - ローカル・データ・センターの少なくとも1つのレプリカ・ノードに |br| 書き込みを送信し、 確認応答がある
   * - ANY
     - 書き込みが、少なくとも1つのノードに書き込まれる。パーティション・キーの |br| すべての レプリカ・ノードがダウンしていても、 |br| ヒンテッド・ハンドオフが書き込まれれば、書き込みを成功と見なす。


.. list-table:: 設定可能な読み込み一貫性*1
   :header-rows: 1
   :widths: 30,50

   * - 一貫性レベル
     - 特徴
   * - ALL
     - すべてのレプリカが応答した後に、レコードを返す。1つでもレプリカが |br| 応答しないと、読み取り操作は失敗する。
   * - EACH_QUORUM
     - 読み取りが、各データ・センターのレプリカ・ノードのクォーラム |br| （過半数）で読み取られる。
   * - QUORUM
     - すべてのデータ・センターのクォーラム（過半数）のレプリカが応答したら、 |br| レコードを返す。
   * - LOCAL_QUORUM
     - コーディネーター・ノードが報告された際に現在のデータ・センター内のクォーラム |br| （過半数）の|br|レプリカが応答したら、レコードを返す。
   * - ONE
     - スニッチによって定まる最も近いレプリカから応答を返します。デフォルトでは、 |br| 他のレプリカとの|br|整合性を維持するために、読み取りリペアが |br| バックグラウンドで実行される。
   * - TWO
     - 最も近い2つのレプリカから最新のデータを返す。
   * - THREE
     - 最も近い3つのレプリカから最新のデータを返す。
   * - LOCAL_ONE
     - ローカル・データ・センターの最も近いレプリカからの応答を返す
   * - SERIAL
     - 新しい追加や更新を提示することなく、現在の（そしてコミットされていない |br| 可能性がある）データの状態を読み取ることができる。SERIALの読み取りにおいて |br| 進行中のコミットされていないトランザクションが見つかった場合は、 |br| 読み取りの一環としてそのトランザクションがコミットされる。
   * - LOCAL_SERIAL
     - SERIALと同じだが、データ・センターに限定される。

.. list-table:: SQLと比較した場合のCQLの特徴*2
   :header-rows: 1
   :widths: 30,50

   * - No
     - 特徴
   * - 1
     - 結合や外部キー、副問合せのサポートがない  |br| → 必要に応じてテーブルを非正規化、マテリアライズドビューを使用する。
   * - 2
     - GROUP BY等集約関数が標準で存在しない。Cassandra3以降、ユーザ定義関数はサポート。 |br| → アプリの中でロジックとして実装する
   * - 3
     - WHERE句でプライマリキー以外を使用するにはインデックスが必要 |br| → セカンダリインデックスを作成したり、マテリアライズドビューを使用する。
   * - 4
     - データ型でCollectionをサポート。1:n関連に相当する有限のデータはCollectionを利用する。 |br|
       センサーデータのような無限にデータが増えていく場合は、複合プライマリーキーを使用する。 |br| → 必要に応じて、テーブルを非正規化する。
   * - 5
     - 更新の条件指定はプライマリキーのみに限定される |br| アプリの中でロジックとして実装する。 
   * - 6
     - "OR"、"NOT"といった論理演算子はなく、ANDのみに限定される |br| → アプリの中でロジックとして実装する
   * - 7
     - 日付型の演算時可能な表現が異なる |br| → アプリの中でロジックとして実装する。
   * - 8
     - 重複したキーのインサートはアップデートとして扱われる


.. _section6-X-X-differenece-rdb-consistency-problem-label:

データ整合性に問題が生じるケース
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _section6-X-X-differenece-rdb-consistency-problem-replication-label:

レプリケーション間のデータ不整合
""""""""""""""""""""""""""""""""""""""""""""""""""""""

.. _section6-X-X-differenece-rdb-consistency-problem-denormalization-label:

非正規化によるデータ分散による不整合
""""""""""""""""""""""""""""""""""""""""""""""""""""""

.. _section6-X-X-differenece-design-method-label:

設計手順
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* リレーショナルモデルの設計手順

#. 概念データモデル・論理設計

   #. エンティティの抽出
   #. エンティティモデル定義
   #. 正規化
   #. ER図の作成

#. ユースケース記述・処理設計

   #. サービスインターフェース設計
   #. ドメインインターフェース設計
   #. コンポーネント処理設計(クエリ設計)

#. 物理設計

   #. テーブル定義
   #. インデックス定義
   #. ハードウェアサイジング
   #. ストレージ冗長化構成
   #. 物理配置設計

* Cassandraでの設計手順

#. 概念データモデル・論理設計

   #. エンティティの抽出
   #. エンティティモデル定義

#. ユースケース記述・処理設計

   #. サービスインターフェース設計
   #. ドメインインターフェース設計
   #. コンポーネント処理設計(クエリ設計)

#. 物理設計

   #. テーブル定義
   #. インデックス定義
   #. 物理配置設計



